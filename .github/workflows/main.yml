name: Main Foodgram workflow

on:
  push:
    branches: [master]

jobs:
  tests:
    name: PEP8-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip 
          pip install flake8 pep8-naming flake8-broken-line flake8-return
          pip install -r backend/requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8 backend

  build_and_push_to_docker_hub:
    name: Push images to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend to DockerHub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: backend/
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

      - name: Push frontend to DockerHub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: frontend/
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # Временный шаг для вывода ключа
      - name: Debug SSH Key
        run: |
          echo "SSH Key: ${{ secrets.SSH_KEY }}"

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd foodgram
            sudo docker-compose stop backend
            sudo docker-compose rm -f backend
            sudo docker image prune -af
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            sudo docker-compose up -d
            sudo docker-compose exec -T backend python manage.py makemigrations users
            sudo docker-compose exec -T backend python manage.py makemigrations recipes
            sudo docker-compose exec -T backend python manage.py migrate
            sudo docker-compose exec -T backend python manage.py collectstatic --noinput
            sudo docker-compose exec -T backend python manage.py loaddata ingredients.json

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
